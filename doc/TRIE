OVERVIEW

OddComm Trie, as implemented by lib/trie
Designed by J Beshir

This trie is designed to permit high levels of concurrent access with minimal synchronisation overhead through lock-free reads even while writing is occurring. Concurrent writing remains not permitted; an external mutex should be used.

It likely can be optimised significantly, but the primary cost in the present version of the code is synchronisation, which this will significantly reduce.


STRUCTURE

Three primary structures are used, each containing a pointer pointing to a more inner structure.
Trie -> nodeBox -> node

// Trie provides the implementation of the radix trie.
// An empty trie uses no more space than a nil pointer.
type Trie struct {
	first *Node      // First node pointer.
}

// nodeBox contains a single trie node. It wraps the node, so it can be changed
// atomically without invalidating pointers.
type nodeBox struct {
	n *node
}

// node stores the contents of a trie node.
type node struct {
	nodekey string      // Key of this node, not including parent nodekeys.
	down    *Node       // First child of this node (nilable).
	next    *Node       // Next sibling of this node (nilable).
	key     string      // Full key of this node, if it has a key.
	value   interface{} // If set, this node contains a value.
}

A parent’s key is the common prefix of all its child keys. The trie is structured like this:

parent
   |
child -> child -> child

An iterator structure with methods is also provided, but has no impact on the rest of the design and is simply a stack of parents coupled with a current node pointer.


INVARIANTS

The key of the parent of a node cannot change value, nor can the first character of a node’s own key. A node’s key can only change by being shortened in the process of being split into two nodes, with the second taking the children of the first. This obeys both those rules. These rules mean that a node’s key cannot change at all without the node itself being changed.

All added nodes will be added at the start of the list of children under the same parent. This means that addition will change the parent node of the new node.

All decisions made must depend either only on the above rules, or on a node or pointer that is changed not having being changed since it was first examined.


READING

All writes are performed via atomic write operations which leave the trie in a well-defined state. As such, reading does not require any synchronisation or atomic operations. Iterators will never be invalidated but may miss changes if they iterate through deleted nodes until they reach a part of the tree that still exists.


INSERT/UPDATE

Inserts a key with a value and return its previous value, if it had any.

Iterate through the first sibling list, matching on nodekey. For each key, there are the following possibilities:

 - The key matches nodekey. Change the value of this node to ours, return old value.

 - The start of the key matches nodekey: Cut key by nodekey, restart from its first child.

 - The key or the start of the key matches the start of nodekey:
   1. Create a new node whose nodekey is the matched part of the nodekey, which copies the key’s siblings. If the whole key matched, its value is the value to add.
   2. Create a new node whose nodekey is the unmatched part of the nodekey, which copies the key’s value and children, but not siblings. Make it a child of the above.
   3. If there was an unmatched part of the key, create a new node whose nodekey is the unmatched part of the key, whose value is the value to add. Make it a second child of the firstnode.
   4. Replace the matched node with the first new node.

 - No match, move to the next sibling.


If the end of the list is reached, create a new node with the key and value, and add as the first child of the parent, if one exists, or as the first node otherwise.


DELETION

Deletes the given key. Returns the value of the key deleted, if it had one.

Iterate through the first sibling list, matching on nodekey. When we go downwards, remember the parent we passed. For each key, there are the following possibilities:

 - The key matches nodekey.

   1. If it has children, delete any value stored in the node but leave it existing, and return success.

   2. If it does not have children, set whatever pointer was pointing to it to point to its next value.

   3. If we edited the parent, delete the parent if it has no value or children. Repeat this step until we no longer edited a parent node of the node deleted.

 - The start of the key matches nodekey: Cut key by nodekey, restart from its first child.

 - The key or the start of the key matches the start of nodekey: The key we’re looking for does not exist, as if it did, this key would not be able to exist as a full key. Return false.

 - No match, move to the next sibling.
